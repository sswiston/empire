% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataTree.R
\name{dataTree}
\alias{dataTree}
\title{dataTree object}
\description{
This class stores an object of class "detailedTree" alongside an object of class "ellipseParam" containing model parameters and data objects (W, V, XY) containing simulated or data-augmented values at nodes.
}
\details{
This object is used during simulation to contain the simulated history of all cladogenetic events (W) and continuous values (V, XY) at all nodes (including tips). During inference, the data-augmented values for cladogenetic scenarios (W) and continuous parameters (V) will be updated, along with root states for (XY). The (XY) values for internal nodes will not be used during inference, and will therefore be set to "NA". Some elements of the ellipseParam object in the (param) field will also be updated during inference.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{tree}}{An object of class "detailedTree"}

\item{\code{param}}{An object of type ellipseParam containing information about the model parameters associated with a simulation or MCMC iteration}

\item{\code{W}}{An object of class "data.frame" containing the simulated or data-augmented cladogenetic scenario assigned to each non-tip node}

\item{\code{V}}{An object of class "data.frame" containing the simulated or data-augmented values for parameters 'r', 's', and 'a' assigned to each internal node}

\item{\code{XY}}{An object of class "data.frame" containing information about the 'x' and 'y' values. During simulation, this field will contain the full history of 'x' and 'y' values at each node. During inference, non-root internal nodes will be ignored.}

\item{\code{tip_data}}{An object of class "data.frame" containing taxon names "taxon" and the true values of characters 'x', 'y', 'r', 's', and 'a' observed at the tips of the phylogeny (extant taxa). The taxa names must exactly match those provided on the tree, although the order may be different. This data will be used to inform the V and XY dataframes -- if tip_data is not "NULL", simulating or setting V/XY will only apply to internal nodes and will not overwrite the characters at the tips.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-dataTree-new}{\code{dataTree$new()}}
\item \href{#method-dataTree-sim_W}{\code{dataTree$sim_W()}}
\item \href{#method-dataTree-sim_V}{\code{dataTree$sim_V()}}
\item \href{#method-dataTree-init_V}{\code{dataTree$init_V()}}
\item \href{#method-dataTree-init_XY}{\code{dataTree$init_XY()}}
\item \href{#method-dataTree-reconstruct}{\code{dataTree$reconstruct()}}
\item \href{#method-dataTree-sim_XY}{\code{dataTree$sim_XY()}}
\item \href{#method-dataTree-sim_data}{\code{dataTree$sim_data()}}
\item \href{#method-dataTree-sim}{\code{dataTree$sim()}}
\item \href{#method-dataTree-save}{\code{dataTree$save()}}
\item \href{#method-dataTree-clone}{\code{dataTree$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-new"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of the dataTree class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$new(
  tree = NULL,
  param = NULL,
  W = NULL,
  V = NULL,
  XY = NULL,
  tip_data = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tree}}{An object of class "detailedTree"}

\item{\code{param}}{An object of type ellipseParam containing information about the model parameters associated with a simulation or MCMC iteration}

\item{\code{W}}{An object of class "data.frame" containing the simulated or data-augmented cladogenetic scenario assigned to each non-tip node}

\item{\code{V}}{An object of class "data.frame" containing the simulated or data-augmented values for parameters 'r', 's', and 'a' assigned to each internal node}

\item{\code{XY}}{An object of class "data.frame" containing information about the 'x' and 'y' values. During simulation, this field will contain the full history of 'x' and 'y' values at each node. During inference, non-root internal nodes will be ignored.}

\item{\code{tip_data}}{An object of class "data.frame" containing the true values of characters 'x', 'y', 'r', 's', and 'a' observed at the tips of the phylogeny (extant taxa). The taxa names must exactly match those provided on the tree, although the order may be different. This data will be used to inform the V and XY dataframes -- if tip_data is not "NULL", simulating or setting V/XY will only apply to internal nodes and will not overwrite the characters at the tips. When tip-specific moves (inverting r & s values) are performed, the values in tip_data will not be changed, but the values in V will be changed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-sim_W"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-sim_W}{}}}
\subsection{Method \code{sim_W()}}{
Simulates values for the W field of the dataTree object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$sim_W()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The W object contains information about the simulated or data-augmented cladogenetic scenarios at each internal node. This includes the daughter assignment 'd', the cladogenetic mode 'm', the concentric circle 'c', and the direction line 'h'.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-sim_V"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-sim_V}{}}}
\subsection{Method \code{sim_V()}}{
Simulates values for the V field of the dataTree object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$sim_V()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The V object contains information about the simulated or data-augmented values of continuous characters 'r', 's', and 'a' at each internal node.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-init_V"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-init_V}{}}}
\subsection{Method \code{init_V()}}{
Initializes values for the V field of the dataTree object to max likelihood under simple univariate Brownian motion
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$init_V()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The V object contains information about the simulated or data-augmented values of continuous characters 'r', 's', and 'a' at each internal node.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-init_XY"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-init_XY}{}}}
\subsection{Method \code{init_XY()}}{
Initializes values for the XY field of the dataTree object to max likelihood under simple univariate Brownian motion
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$init_XY()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The XY object contains information about the simulated or data-augmented values of continuous characters 'x' and 'y' at each internal node, including the root.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-reconstruct"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-reconstruct}{}}}
\subsection{Method \code{reconstruct()}}{
Samples values for the XY field of the dataTree object according to multivariate normal distribution using full phylogenetic variance-covariance matrix (including internal nodes), conditioned on observed tips and expected values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$reconstruct()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The XY object contains information about the reconstructed values of continuous characters 'x' and 'y' at each internal node, including the root.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-sim_XY"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-sim_XY}{}}}
\subsection{Method \code{sim_XY()}}{
Simulates values for the XY field of the dataTree object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$sim_XY()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The XY object contains information about the simulated or data-augmented values of continuous characters 'x', and 'y' at each internal node. If the values are input (for inference) rather than simulated, the internal non-root nodes will have NA values.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-sim_data"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-sim_data}{}}}
\subsection{Method \code{sim_data()}}{
Simulates values for the W, V, and XY fields of the dataTree object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$sim_data(param = self$param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{An object of type ellipseParam containing information about the model parameters associated with a simulation or MCMC iteration. If no value is provided by the user or by the dataTree object, parameters will be simulated according to default priors (see ?ellipseParam for information about default priors).}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method assumes that the dataTree object already contains a tree of class "detailedTree" in the tree field. If you want to simulate a tree instead, use the sim() method.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-sim"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-sim}{}}}
\subsection{Method \code{sim()}}{
Simulates a tree and values for the W, V, and XY fields of the dataTree object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$sim(param = self$param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{An object of type ellipseParam containing information about the model parameters associated with a simulation or MCMC iteration. If no value is provided by the user or by the dataTree object, parameters will be simulated according to default priors (see ?ellipseParam for information about default priors).}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method simulates a tree according to the sim_tree() function, then simulates data associated with that tree.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-save"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-save}{}}}
\subsection{Method \code{save()}}{
This method saves each element of a dataTree in a speficied directory with a specified prefix
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$save(filepath = ".", prefix = "sim")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filepath}}{An object of class "character" giving the filepath to the directory where you want the output to be saved. The default behavior will save files to the current directory.}

\item{\code{prefix}}{An object of class "character" giving the prefix you want to assign to output files. The default prefix is "sim".}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The output files are: <prefix>.tree.txt, <prefix>.W.tsv, <prefix>.V.tsv, <prefix>.XY.tsv, and <prefix>.param.tsv
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dataTree-clone"></a>}}
\if{latex}{\out{\hypertarget{method-dataTree-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dataTree$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
